/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.Status

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DefaultApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://your-hostname.local:8090")
        }
    }

    /**
     * GET /status
     * Get status of server
     * Get status of all properties
     * @param cid Optional client ID (optional)
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getStatus(cid: kotlin.Int? = null) : Status {
        val localVarResponse = getStatusWithHttpInfo(cid = cid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /status
     * Get status of server
     * Get status of all properties
     * @param cid Optional client ID (optional)
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getStatusWithHttpInfo(cid: kotlin.Int?) : ApiResponse<Status?> {
        val localVariableConfig = getStatusRequestConfig(cid = cid)

        return request<Unit, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getStatus
     *
     * @param cid Optional client ID (optional)
     * @return RequestConfig
     */
    fun getStatusRequestConfig(cid: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (cid != null) {
                    put("cid", listOf(cid.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/status",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter cam
     */
     enum class CamOutputCamDisable(val value: kotlin.String) {
         @Json(name = "BOTH") BOTH("BOTH"),
         @Json(name = "L") L("L"),
         @Json(name = "R") R("R");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * POST /output/cams/disable
     * Disable one of the cameras if both are enabled
     * 
     * @param cam  (optional)
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun outputCamDisable(cam: CamOutputCamDisable? = null) : Status {
        val localVarResponse = outputCamDisableWithHttpInfo(cam = cam)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /output/cams/disable
     * Disable one of the cameras if both are enabled
     * 
     * @param cam  (optional)
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun outputCamDisableWithHttpInfo(cam: CamOutputCamDisable?) : ApiResponse<Status?> {
        val localVariableConfig = outputCamDisableRequestConfig(cam = cam)

        return request<Map<String, PartConfig<*>>, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation outputCamDisable
     *
     * @param cam  (optional)
     * @return RequestConfig
     */
    fun outputCamDisableRequestConfig(cam: CamOutputCamDisable?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "cam" to PartConfig(body = cam?.value, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/output/cams/disable",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter cam
     */
     enum class CamOutputCamEnable(val value: kotlin.String) {
         @Json(name = "BOTH") BOTH("BOTH"),
         @Json(name = "L") L("L"),
         @Json(name = "R") R("R");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * POST /output/cams/enable
     * Enable one or both cameras
     * 
     * @param cam  (optional)
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun outputCamEnable(cam: CamOutputCamEnable? = null) : Status {
        val localVarResponse = outputCamEnableWithHttpInfo(cam = cam)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /output/cams/enable
     * Enable one or both cameras
     * 
     * @param cam  (optional)
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun outputCamEnableWithHttpInfo(cam: CamOutputCamEnable?) : ApiResponse<Status?> {
        val localVariableConfig = outputCamEnableRequestConfig(cam = cam)

        return request<Map<String, PartConfig<*>>, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation outputCamEnable
     *
     * @param cam  (optional)
     * @return RequestConfig
     */
    fun outputCamEnableRequestConfig(cam: CamOutputCamEnable?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "cam" to PartConfig(body = cam?.value, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/output/cams/enable",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /output/cams/swap
     * Swap the active camera if only one is enabled and the other available
     * 
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun outputCamSwap() : Status {
        val localVarResponse = outputCamSwapWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /output/cams/swap
     * Swap the active camera if only one is enabled and the other available
     * 
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun outputCamSwapWithHttpInfo() : ApiResponse<Status?> {
        val localVariableConfig = outputCamSwapRequestConfig()

        return request<Unit, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation outputCamSwap
     *
     * @return RequestConfig
     */
    fun outputCamSwapRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/output/cams/swap",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /proc/bnc/brightness
     * Set brightness for frame processor Brightness
     * 
     * @param v  (optional)
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun procBncBrightness(v: kotlin.Int? = null) : Status {
        val localVarResponse = procBncBrightnessWithHttpInfo(v = v)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /proc/bnc/brightness
     * Set brightness for frame processor Brightness
     * 
     * @param v  (optional)
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun procBncBrightnessWithHttpInfo(v: kotlin.Int?) : ApiResponse<Status?> {
        val localVariableConfig = procBncBrightnessRequestConfig(v = v)

        return request<Map<String, PartConfig<*>>, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation procBncBrightness
     *
     * @param v  (optional)
     * @return RequestConfig
     */
    fun procBncBrightnessRequestConfig(v: kotlin.Int?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "v" to PartConfig(body = v, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/proc/bnc/brightness",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /proc/bnc/contrast
     * Set contrast for frame processor Brightness
     * 
     * @param v  (optional)
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun procBncContrast(v: kotlin.Int? = null) : Status {
        val localVarResponse = procBncContrastWithHttpInfo(v = v)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /proc/bnc/contrast
     * Set contrast for frame processor Brightness
     * 
     * @param v  (optional)
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun procBncContrastWithHttpInfo(v: kotlin.Int?) : ApiResponse<Status?> {
        val localVariableConfig = procBncContrastRequestConfig(v = v)

        return request<Map<String, PartConfig<*>>, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation procBncContrast
     *
     * @param v  (optional)
     * @return RequestConfig
     */
    fun procBncContrastRequestConfig(v: kotlin.Int?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "v" to PartConfig(body = v, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/proc/bnc/contrast",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /proc/bnc/gamma
     * Set gamma for frame processor Brightness
     * 
     * @param v  (optional)
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun procBncGamma(v: kotlin.Int? = null) : Status {
        val localVarResponse = procBncGammaWithHttpInfo(v = v)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /proc/bnc/gamma
     * Set gamma for frame processor Brightness
     * 
     * @param v  (optional)
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun procBncGammaWithHttpInfo(v: kotlin.Int?) : ApiResponse<Status?> {
        val localVariableConfig = procBncGammaRequestConfig(v = v)

        return request<Map<String, PartConfig<*>>, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation procBncGamma
     *
     * @param v  (optional)
     * @return RequestConfig
     */
    fun procBncGammaRequestConfig(v: kotlin.Int?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "v" to PartConfig(body = v, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/proc/bnc/gamma",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /proc/cal/reset
     * Set reset-calibration flag for frame processor Calibration
     * 
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun procCalReset() : Status {
        val localVarResponse = procCalResetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /proc/cal/reset
     * Set reset-calibration flag for frame processor Calibration
     * 
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun procCalResetWithHttpInfo() : ApiResponse<Status?> {
        val localVariableConfig = procCalResetRequestConfig()

        return request<Unit, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation procCalReset
     *
     * @return RequestConfig
     */
    fun procCalResetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/proc/cal/reset",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /proc/cal/showchesscorners
     * Set show-chesscorners flag for frame processor Calibration
     * 
     * @param v  (optional)
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun procCalShowchesscorners(v: kotlin.Int? = null) : Status {
        val localVarResponse = procCalShowchesscornersWithHttpInfo(v = v)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /proc/cal/showchesscorners
     * Set show-chesscorners flag for frame processor Calibration
     * 
     * @param v  (optional)
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun procCalShowchesscornersWithHttpInfo(v: kotlin.Int?) : ApiResponse<Status?> {
        val localVariableConfig = procCalShowchesscornersRequestConfig(v = v)

        return request<Map<String, PartConfig<*>>, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation procCalShowchesscorners
     *
     * @param v  (optional)
     * @return RequestConfig
     */
    fun procCalShowchesscornersRequestConfig(v: kotlin.Int?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "v" to PartConfig(body = v, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/proc/cal/showchesscorners",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /proc/cal/start
     * Set start-calibration flag for frame processor Calibration
     * 
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun procCalStart() : Status {
        val localVarResponse = procCalStartWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /proc/cal/start
     * Set start-calibration flag for frame processor Calibration
     * 
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun procCalStartWithHttpInfo() : ApiResponse<Status?> {
        val localVariableConfig = procCalStartRequestConfig()

        return request<Unit, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation procCalStart
     *
     * @return RequestConfig
     */
    fun procCalStartRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/proc/cal/start",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /proc/grid/show
     * Set show-grid for frame processor Grid
     * 
     * @param v  (optional)
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun procGridShow(v: kotlin.Int? = null) : Status {
        val localVarResponse = procGridShowWithHttpInfo(v = v)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /proc/grid/show
     * Set show-grid for frame processor Grid
     * 
     * @param v  (optional)
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun procGridShowWithHttpInfo(v: kotlin.Int?) : ApiResponse<Status?> {
        val localVariableConfig = procGridShowRequestConfig(v = v)

        return request<Map<String, PartConfig<*>>, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation procGridShow
     *
     * @param v  (optional)
     * @return RequestConfig
     */
    fun procGridShowRequestConfig(v: kotlin.Int?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "v" to PartConfig(body = v, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/proc/grid/show",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /proc/pt/rect_corner
     * Set next corner coordinates for frame processor Perspective-Transformation
     * 
     * @param x  (optional)
     * @param y  (optional)
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun procPtRectcorner(x: kotlin.Int? = null, y: kotlin.Int? = null) : Status {
        val localVarResponse = procPtRectcornerWithHttpInfo(x = x, y = y)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /proc/pt/rect_corner
     * Set next corner coordinates for frame processor Perspective-Transformation
     * 
     * @param x  (optional)
     * @param y  (optional)
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun procPtRectcornerWithHttpInfo(x: kotlin.Int?, y: kotlin.Int?) : ApiResponse<Status?> {
        val localVariableConfig = procPtRectcornerRequestConfig(x = x, y = y)

        return request<Map<String, PartConfig<*>>, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation procPtRectcorner
     *
     * @param x  (optional)
     * @param y  (optional)
     * @return RequestConfig
     */
    fun procPtRectcornerRequestConfig(x: kotlin.Int?, y: kotlin.Int?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "x" to PartConfig(body = x, headers = mutableMapOf()),
            "y" to PartConfig(body = y, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/proc/pt/rect_corner",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /proc/pt/reset
     * Reset corners for frame processor Perspective-Transformation
     * 
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun procPtReset() : Status {
        val localVarResponse = procPtResetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /proc/pt/reset
     * Reset corners for frame processor Perspective-Transformation
     * 
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun procPtResetWithHttpInfo() : ApiResponse<Status?> {
        val localVariableConfig = procPtResetRequestConfig()

        return request<Unit, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation procPtReset
     *
     * @return RequestConfig
     */
    fun procPtResetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/proc/pt/reset",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /proc/roi/size
     * Set size flag for frame processor Region-Of-Interest
     * 
     * @param v  (optional)
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun procRoiSize(v: kotlin.Int? = null) : Status {
        val localVarResponse = procRoiSizeWithHttpInfo(v = v)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /proc/roi/size
     * Set size flag for frame processor Region-Of-Interest
     * 
     * @param v  (optional)
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun procRoiSizeWithHttpInfo(v: kotlin.Int?) : ApiResponse<Status?> {
        val localVariableConfig = procRoiSizeRequestConfig(v = v)

        return request<Map<String, PartConfig<*>>, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation procRoiSize
     *
     * @param v  (optional)
     * @return RequestConfig
     */
    fun procRoiSizeRequestConfig(v: kotlin.Int?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "v" to PartConfig(body = v, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/proc/roi/size",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /proc/tr/dyndelta
     * Set dynamic-delta-left-and-right flag for frame processor Translation
     * 
     * @param lx  (optional)
     * @param ly  (optional)
     * @param rx  (optional)
     * @param ry  (optional)
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun procTrDyndelta(lx: kotlin.Int? = null, ly: kotlin.Int? = null, rx: kotlin.Int? = null, ry: kotlin.Int? = null) : Status {
        val localVarResponse = procTrDyndeltaWithHttpInfo(lx = lx, ly = ly, rx = rx, ry = ry)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /proc/tr/dyndelta
     * Set dynamic-delta-left-and-right flag for frame processor Translation
     * 
     * @param lx  (optional)
     * @param ly  (optional)
     * @param rx  (optional)
     * @param ry  (optional)
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun procTrDyndeltaWithHttpInfo(lx: kotlin.Int?, ly: kotlin.Int?, rx: kotlin.Int?, ry: kotlin.Int?) : ApiResponse<Status?> {
        val localVariableConfig = procTrDyndeltaRequestConfig(lx = lx, ly = ly, rx = rx, ry = ry)

        return request<Map<String, PartConfig<*>>, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation procTrDyndelta
     *
     * @param lx  (optional)
     * @param ly  (optional)
     * @param rx  (optional)
     * @param ry  (optional)
     * @return RequestConfig
     */
    fun procTrDyndeltaRequestConfig(lx: kotlin.Int?, ly: kotlin.Int?, rx: kotlin.Int?, ry: kotlin.Int?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "Lx" to PartConfig(body = lx, headers = mutableMapOf()),
            "Ly" to PartConfig(body = ly, headers = mutableMapOf()),
            "Rx" to PartConfig(body = rx, headers = mutableMapOf()),
            "Ry" to PartConfig(body = ry, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/proc/tr/dyndelta",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /proc/tr/fixdelta/L
     * Set fix-delta-left flag for frame processor Translation
     * 
     * @param x  (optional)
     * @param y  (optional)
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun procTrFixdeltaL(x: kotlin.Int? = null, y: kotlin.Int? = null) : Status {
        val localVarResponse = procTrFixdeltaLWithHttpInfo(x = x, y = y)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /proc/tr/fixdelta/L
     * Set fix-delta-left flag for frame processor Translation
     * 
     * @param x  (optional)
     * @param y  (optional)
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun procTrFixdeltaLWithHttpInfo(x: kotlin.Int?, y: kotlin.Int?) : ApiResponse<Status?> {
        val localVariableConfig = procTrFixdeltaLRequestConfig(x = x, y = y)

        return request<Map<String, PartConfig<*>>, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation procTrFixdeltaL
     *
     * @param x  (optional)
     * @param y  (optional)
     * @return RequestConfig
     */
    fun procTrFixdeltaLRequestConfig(x: kotlin.Int?, y: kotlin.Int?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "x" to PartConfig(body = x, headers = mutableMapOf()),
            "y" to PartConfig(body = y, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/proc/tr/fixdelta/L",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /proc/tr/fixdelta/R
     * Set fix-delta-right flag for frame processor Translation
     * 
     * @param x  (optional)
     * @param y  (optional)
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun procTrFixdeltaR(x: kotlin.Int? = null, y: kotlin.Int? = null) : Status {
        val localVarResponse = procTrFixdeltaRWithHttpInfo(x = x, y = y)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /proc/tr/fixdelta/R
     * Set fix-delta-right flag for frame processor Translation
     * 
     * @param x  (optional)
     * @param y  (optional)
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun procTrFixdeltaRWithHttpInfo(x: kotlin.Int?, y: kotlin.Int?) : ApiResponse<Status?> {
        val localVariableConfig = procTrFixdeltaRRequestConfig(x = x, y = y)

        return request<Map<String, PartConfig<*>>, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation procTrFixdeltaR
     *
     * @param x  (optional)
     * @param y  (optional)
     * @return RequestConfig
     */
    fun procTrFixdeltaRRequestConfig(x: kotlin.Int?, y: kotlin.Int?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "x" to PartConfig(body = x, headers = mutableMapOf()),
            "y" to PartConfig(body = y, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/proc/tr/fixdelta/R",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /proc/tr/reset
     * Set reset-deltas flag for frame processor Translation
     * 
     * @return Status
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun procTrReset() : Status {
        val localVarResponse = procTrResetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Status
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /proc/tr/reset
     * Set reset-deltas flag for frame processor Translation
     * 
     * @return ApiResponse<Status?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun procTrResetWithHttpInfo() : ApiResponse<Status?> {
        val localVariableConfig = procTrResetRequestConfig()

        return request<Unit, Status>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation procTrReset
     *
     * @return RequestConfig
     */
    fun procTrResetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/proc/tr/reset",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
